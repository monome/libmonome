#!/bin/bash

#
# Copyright (c) 2010 William Light <wrl@illest.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

#
# variables and such
#

PROJECT="libmonome";
VERSION="1.0";

CC="gcc";
LD="\$(CC)";
CC_VERSION=;

CFLAGS="-ggdb";
LDFLAGS="-ggdb";

PKGCONFIG_VERSION=;

PLATFORM=;
PLATFORM_VERSION=;
PREFIX="/usr/local";
MANDIR=;
PROTOCOLS="mext series 40h";
LIBUDEV_VERSION=;

LM_LDFLAGS="";
LM_SUFFIX=;

WANT_OSC=probably;
HAVE_LO=;
LO_VERSION=;
LO_PREFIX=$PREFIX;
LO_CFLAGS="";
LO_LDFLAGS="-llo -lpthread";
SO_LDFLAGS="";

BINDINGS=;

#WANT_PYBIND=probably;
WANT_PYBIND=;
HAVE_PYTHON=;
HAVE_CYTHON=;
CYTHON_VERSION=;
PYTHON_VERSION=;
PYBIND_CFLAGS=;
PYBIND_LDFLAGS=;
PYTHON_INSTALL_DIR=;

HAVE_MACPORTS=;
MACPORTS_VERSION=;

#
# functions
#

# figure out the right things to pass to echo to supress a newline
if [ "`echo -n`" = "-n" ]; then
	n=""; c="\c";
else
	n="-n"; c="";
fi

_echo () {
	# portable (sysv/bsd) echo -n
	if [ $1 = "-n" ]; then
		shift;
		echo $n "$*" $c;
	else
		echo "$*";
	fi
}

echo_n () {
	_echo -n "$*";
}

# color and text styles

att() {
	if [ $# -eq 0 ]; then
		echo -ne "\033[0m";
		return 0;
	fi

	echo -ne "\033["
	while [ $# -ge 1 ]; do
		case $1 in
			bold)      C=1;;
			underline) C=4;;
			hidden)    C=8;;

			black)     C=30;;
			red)       C=31;;
			green)     C=32;;
			yellow)    C=33;;
			blue)      C=34;;
			magenta)   C=35;;
			cyan)      C=36;;
			white)     C=37;;

			reset)
				echo -ne "0m";
				return 0;
		esac

		echo -ne "$C"

		if [ $# -ge 2 ]; then
			echo -ne ";";
		fi

		shift;
	done;
	echo -ne "m";
}

style_package () { att blue bold; _echo $*; att; }
style_success () { att green; _echo $*; att; }
style_distro  () { att cyan; _echo $*; att; }
style_error   () { att red bold; _echo $*; att; }
style_warning () { att yellow bold; echo $*; att; }
style_link    () { att blue bold underline; _echo $*; att; }

cleanup () {
	rmdir .conftests
}

# feature test commands

try_command () {
	if $* > /dev/null 2> /dev/null; then
		return 0;
	else
		return 1;
	fi
}

compile_and_run() {
	FILE=$1
	shift;

	CMD="$CC $CFLAGS $LDFLAGS $* .conftests/$FILE.c -o .conftests/$FILE"
	try_command $CMD;
	RET=$?;

	rm -f .conftests/$FILE.c;

	[ $RET -ne 0 ] && return -1;

	CMD="./.conftests/$FILE";
	try_command $CMD;
	RET=$?;

	rm -f .conftests/$FILE;

	[ $RET -ne 0 ] && return $RET;
	return 0;
}

check_pkgconfig () {
	CMD="pkg-config --version";

	if try_command $CMD; then
		PKGCONFIG_VERSION=`$CMD`;
	fi
}

get_platform () {
	try_command "uname";

	if [ $? -ne 0 ]; then
		PLATFORM="dummy";
		return 1;
	fi

	PLATFORM=`uname`;
	return 0;
}

check_gcc () {
	CMD="$CC -dumpversion";
	try_command $CMD;

	if [ $? -eq 0 ]; then
		CC_VERSION=`$CMD`;
		return 0;
	fi

	CC_VERSION=;
	return 1;
}

check_endian() {
	cat <<EOF > .conftests/endian.c
#include <stdint.h>

int main(int argc, char **argv) {
	uint32_t bytes = 0xFEEDFACE;

	if( *((uint8_t *) &bytes) == 0xCE )
		return 0; /* little-endian */
	return 1; /* big-endian */
}
EOF

	compile_and_run endian;
	return $?;
}

check_poll () {
	# ganked from glib's poll test

	cat <<EOF > .conftests/poll.c
#include <stdlib.h>
#include <poll.h>

int main(int argc, char **argv) {
	struct pollfd fds[1];

	fds[0].fd = open("/dev/null", 1);
	fds[0].events = POLLIN;

	if( poll(fds, 1, 0) < 0 || fds[0].revents & POLLNVAL )
		exit(1);
	exit(0);
}
EOF
	compile_and_run poll;
	return $?;
}

check_libudev () {
	cat <<EOF > .conftests/libudev.c
#include <libudev.h>

int main(int argc, char **argv) {
	struct udev *udev = udev_new();
	udev_unref(udev);

	return 0;
}
EOF

	compile_and_run libudev "" "-ludev";
	RET=$?;

	if [ $RET -ne 0 ]; then
		return $RET;
	fi

	if [ $PKGCONFIG_VERSION ]; then
		CMD="pkg-config --modversion libudev"
		try_command $CMD;

		if [ $? -ne 0 ]; then
			return 0;
		fi

		LIBUDEV_VERSION=`$CMD`;
	fi

	return 0;
}

check_lo () {
	cat <<EOF > .conftests/lo.c
#include <lo/lo.h>

int main(int argc, char **argv) {
	lo_address a = lo_address_new(NULL, "42424");
	lo_address_free(a);
	return 0;
}
EOF

	compile_and_run lo $LO_CFLAGS $LO_LDFLAGS;
	RET=$?;

	[ $RET -ne 0 ] && return $RET

	HAVE_LO=1;

	if [ $PKGCONFIG_VERSION ]; then
		CMD="pkg-config --modversion liblo"
		try_command $CMD;

		if [ $? -ne 0 ]; then
			return 0;
		fi

		LO_VERSION=`$CMD`;
	fi

	return 0;
}

check_python() {
	try_command "python --version";
	RET=$?;

	if [ $RET -ne 0 ]; then
		return $RET;
	fi

	HAVE_PYTHON=1;
	PYTHON_VERSION=`expr "$(python --version 2>&1)" : "[^0-9]*\([0-9.]*\)"`;

	return 0;
}

check_cython() {
	try_command "cython --version";
	RET=$?;

	if [ $RET -ne 0 ]; then
		return $RET;
	fi

	HAVE_CYTHON=1;
	CYTHON_VERSION=`expr "$(cython --version 2>&1)" : "[^0-9]*\([0-9.]*\)"`;

	return 0;
}

check_python_dev() {
	cat <<EOF > .conftests/python.c
#include <Python.h>

int main(int argc, char **argv) {
	Py_Initialize();
	Py_Finalize();
	return 0;
}
EOF

	compile_and_run python $PYBIND_CFLAGS $PYBIND_LDFLAGS;
	RET=$?;

	[ $? -ne 0 ] && return $RET;
	return 0;
}

determine_mandir() {
	TRY_MANPATHS=$PREFIX/share/man:$PREFIX/man

	for DIR in `echo $TRY_MANPATHS | tr ':' ' '`; do
		if [ -d $DIR ]; then
			MANDIR=$DIR;
			return 0;
		fi
	done

	return 1;
}

determine_pkgconfigdir() {
	TRY_PKGCONFIGPATHS=$PREFIX/lib/pkgconfig:/usr/lib/pkgconfig:$PKG_CONFIG_PATH

	for DIR in `echo $TRY_PKGCONFIGPATHS | tr ':' ' '`; do
		if [ -d $DIR ]; then
			PKGCONFIGDIR=$DIR;
			return 0;
		fi
	done

	return 1;
}

fail_if_not_dir () {
	if [ ! -d $* ]; then
		echo_n "  "
		style_error -n $*
		echo " is not a valid directory."
		echo ""
		exit 1
	fi
}

usage () {
	echo ""
	echo "  usage: ./configure [OPTIONS]"
	echo ""
	echo "  options [and defaults] are:"
	echo "    --prefix=DIR                install files in PREFIX [/usr/local]"
	echo "    --lo-prefix=DIR             the prefix under which liblo is installed [/usr/local]"
	echo "    --python-install-dir=DIR    the directory in which the python binding will be installed [python's site-packages dir by default]"
	echo ""
	echo "    --disable-osc               disable OSC/liblo support [enabled by default]"
	echo "    --enable-python             enable python binding [disabled by default]"
	echo ""
}

#
# parse args
#

while [ -n "$1" ]; do
	arg=`expr "$1" : "[^=]*=\(.*\)"`

	case $1 in
		--help|-h)
			usage;
			exit 1;;

		--prefix=*)
			fail_if_not_dir $arg;
			PREFIX=$arg;;

		--lo-prefix=*)
			fail_if_not_dir $arg;
			LO_PREFIX=$arg;;

		--disable-osc)
			WANT_OSC=;;

		--enable-python)
			WANT_PYBIND=ohyeah;;

		--disable-python)
			WANT_PYBIND=;;
	esac

	shift;
done;

CFLAGS="$CFLAGS -I$PREFIX/include"
LDFLAGS="$LDFLAGS -L$PREFIX/lib"

LO_CFLAGS="-I$LO_PREFIX/include $LO_CFLAGS"
LO_LDFLAGS="-L$LO_PREFIX/lib $LO_LDFLAGS"

determine_mandir;
determine_pkgconfigdir;

#
# main course
#

echo "";
mkdir -p .conftests
check_pkgconfig;

att bold;
echo_n "  configuring "; style_package -n $PROJECT; att; att bold; echo " ${VERSION}:";
att;

echo_n "    checking platform:            ";
get_platform;

case $PLATFORM in
	Linux)
		CFLAGS="$CFLAGS -fPIC";
		LDFLAGS="$LDFLAGS -Wl,-rpath,$PREFIX/lib";
		SO_LDFLAGS="-lc";
		LM_LDFLAGS="$LM_LDFLAGS -ldl";
		LIBSUFFIX=so;
		LM_SUFFIX=so.$VERSION;
		PLATFORM_VERSION=`uname -r`;
		;;

	Darwin)
		CFLAGS="$CFLAGS -fPIC";
		SO_LDFLAGS="-lc";
		LM_LDFLAGS="$LM_LDFLAGS -ldl";
		LIBSUFFIX=dylib;
		LM_SUFFIX=$VERSION.dylib;
		PLATFORM_VERSION=`expr "$(sw_vers 2>&1)" : "[^0-9]*\([0-9.]*\)"`;
		export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/local/lib/pkgconfig:$PKG_CONFIG_PATH;
		;;

	MINGW*|mingw*)
		LIBSUFFIX=dll;
		LM_SUFFIX=dll;
		PLATFORM=windows;

		CFLAGS="$CFLAGS -fms-extensions"
		;;

	*)
		style_error $PLATFORM;

		echo "";
		echo "  Your platform is not currently supported by libmonome!  I'm sorry.";
		echo "  It's entirely possible that libmonome will compile, and perhaps even run, but it just hasn't been tested yet."
		echo "";
		echo "  Windows support is not currently available.";
		echo "";

		cleanup;
		exit 1;
		;;
esac

PLATFORM=`echo $PLATFORM | tr A-Z a-z`
style_success "$PLATFORM $PLATFORM_VERSION"

conf_gcc() {
	echo_n "    checking for gcc:             ";
	if check_gcc; then
		style_success "gcc $CC_VERSION";
	else
		style_error "no gcc :(";

		echo   "";
		echo   "  I couldn't find gcc on your system!  you will need it to compile ${PROJECT}.";
		echo_n "  If you're on "; style_distro -n "Ubuntu"; echo_n ", make sure to grab the "; style_package -n "build-essential"; echo " package.";
		echo   "  On Mac OS X, you'll need to install the Xcode developer tools or MacPorts.";
		echo   "";

		cleanup;
		exit 1;
	fi
}

conf_endian() {
	echo_n "    determining byte order:       ";
	check_endian;

	case $? in
		0)
			style_success "little endian";
			;;

		1)
			style_success "big endian";
			CFLAGS="$CFLAGS -DLM_BIG_ENDIAN"
			;;

		*)
			style_error "can't figure out";
			echo "";

			cleanup;
			exit 1;
			;;
	esac
}

conf_poll() {
echo_n "    checking for poll:            ";
	if check_poll; then
		style_success "poll works"
	else
		echo "poll is janky"
		CFLAGS="$CFLAGS -DHAVE_BROKEN_POLL"
	fi
}

conf_gcc;
conf_endian;
echo "";
conf_poll;

if [ $PLATFORM = "linux" ]; then
	echo_n "    checking for libudev:         ";
	if check_libudev; then
		style_success "libudev $LIBUDEV_VERSION";
		PLATFORM=linux_libudev;
		LM_LDFLAGS="$LM_LDFLAGS -ludev";
	else
		# why the fuck would you run a system this old

		style_warning "no, using sysfs (you're probably running an old system)"
		PLATFORM=linux_sysfs;
	fi
fi

conf_liblo() {
	echo ""
	echo_n "    checking for liblo:           ";
	if check_lo; then
		style_success "liblo $LO_VERSION";
		PROTOCOLS="$PROTOCOLS osc";
		MS_BUILD=monomeserial;
	else
		style_error "no liblo :(";

		echo   "";
		echo   "  I couldn't find liblo on your system!  It is optional, but probably";
		echo   "  a good idea to build ${PROJECT} with OSC support."
		echo   "";
		echo_n "  If you're "; att bold; echo_n sure; att; echo " you want to build without OSC, rerun ./configure";
		echo_n "  with the "; att bold cyan; echo_n "--disable-osc"; att; echo " option."
		echo   "";
		echo_n "  If you're on "; style_distro -n "Ubuntu"; echo_n ", make sure you have the "; style_package -n "liblo0-dev "; echo " package installed.";
		echo_n "  Users of "; style_distro -n "other distros"; echo_n " and "; style_distro -n "Mac OS X"; echo_n " should look for a "; style_package -n "liblo"; echo " package, or";
		echo_n "  get the source from the liblo homepage at "; style_link -n "http://liblo.sourceforge.net/"; echo ".";
		echo   "";

		cleanup;
		exit 1;
	fi
}

if [ $WANT_OSC ]; then
	conf_liblo;
fi

conf_python_bindings() {
	echo_n "    checking for python:          ";
	if check_python; then true; else
		style_warning "no python :(";
		return 1;
	fi

	PYTHON_VERSION_SHORT=`expr "$PYTHON_VERSION" : "\([0-9.]\{3\}\)"`
	PYTHON_INSTALL_DIR="`python -c "import sys; print sys.prefix;"`/lib/python$PYTHON_VERSION_SHORT/site-packages"
	PYBIND_CFLAGS="-I/usr/include/python$PYTHON_VERSION_SHORT $PYBIND_CFLAGS"
	PYBIND_LDFLAGS="-lpython$PYTHON_VERSION_SHORT $PYBIND_LDFLAGS"

	if [ $PLATFORM = "darwin" ]; then
		PYBIND_CFLAGS="-I/opt/local/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION_SHORT/include/python$PYTHON_VERSION_SHORT -I/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION_SHORT/include/python$PYTHON_VERSION_SHORT $PYBIND_CFLAGS"
		PYBIND_LDFLAGS="-L/opt/local/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION_SHORT/lib -L/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION_SHORT/lib -lpython$PYTHON_VERSION_SHORT $PYBIND_LDFLAGS"
	fi

	if check_cython; then
		style_success "python $PYTHON_VERSION and cython $CYTHON_VERSION";
	else
		if [ -f bindings/python/monome.c ]; then
			style_success "python $PYTHON_VERSION";
		else
			style_warning "python $PYTHON_VERSION, no cython";
			return
		fi
	fi

	echo_n "    checking for python headers:  ";

	if check_python_dev; then true; else
		style_error "no :(";
		echo "";
		echo "  if you want python bindings, make sure you have the python"
		echo "  development files (on ubuntu, the package is python-dev)."
		return
	fi

	style_success "yes";
	BINDINGS="python $BINDINGS";
}

if [ $WANT_PYBIND ]; then
	echo
	conf_python_bindings;
fi

echo "";
att bold; echo "  options:"; att;
echo_n "    installation prefix:          ";
att bold; echo $PREFIX; att;
echo_n "    protocols:                    ";
att bold; echo $PROTOCOLS; att;
echo_n "    bindings:                     ";
att bold; echo $BINDINGS; att;

cat <<EOF > config.mk
export PROJECT    = $PROJECT
export VERSION    = $VERSION

export PREFIX     = $PREFIX
export BINDIR     = $PREFIX/bin
export LIBDIR     = $PREFIX/lib
export INCDIR     = $PREFIX/include
export MANDIR     = $MANDIR
export PKGCONFIGDIR = $PKGCONFIGDIR

export CC         = $CC
export LD         = $LD
export CFLAGS     = $CFLAGS
export LDFLAGS    = $LDFLAGS

export PLATFORM   = $PLATFORM
export LIBSUFFIX  = $LIBSUFFIX
export LM_SUFFIX  = $LM_SUFFIX
export SO_LDFLAGS = $SO_LDFLAGS
export LM_LDFLAGS = \$(SO_LDFLAGS) $LM_LDFLAGS

export PROTOCOLS  = $PROTOCOLS

export MS_BUILD   = $MS_BUILD

export LO_CFLAGS  = $LO_CFLAGS
export LO_LDFLAGS = $LO_LDFLAGS

export BINDINGS   = $BINDINGS

export PYBIND_CFLAGS  = $PYBIND_CFLAGS
export PYBIND_LDFLAGS = $PYBIND_LDFLAGS
export PYTHON_INSTALL_DIR = $PYTHON_INSTALL_DIR
EOF

cat <<EOF > libmonome.pc
prefix=$PREFIX
exec_prefix=\${prefix}
libdir=\${prefix}/lib
includedir=\${prefix}/include

Name: libmonome
Description: C library for accessing Monome user interface devices.
Version: $VERSION
Libs: -L\${libdir} -lmonome
Cflags: -I\${includedir}
EOF

echo "";
echo_n "  run "; style_package -n "make"; echo " to compile ${PROJECT}.";
echo "";

cleanup;
exit 0;
