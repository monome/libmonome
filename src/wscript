#!/usr/bin/env python

from waflib.TaskGen import before_method, after_method, feature

top = ".."

@feature("proto_module")
@before_method('propagate_uselib_vars', 'apply_link')
@after_method('apply_bundle')
def proto_module(self):
	"""
	removes 'lib' from cshlib_PATTERN if it's there.
	"""

	pat = self.env["cshlib_PATTERN"]
	if pat[:3] == "lib":
		pat = pat[3:]
		self.env['cshlib_PATTERN'] = self.env['cxxshlib_PATTERN'] = pat

@feature("force_lib_prefix")
@before_method('propagate_uselib_vars', 'apply_link')
@after_method('apply_bundle')
def force_lib_prefix(self):
	"""
	adds 'lib' to cshlib_PATTERN if it's not there.
	"""

	pat = self.env["cshlib_PATTERN"]
	if pat[:3] != "lib":
		pat = "lib{0}".format(pat)
		self.env['cshlib_PATTERN'] = self.env['cxxshlib_PATTERN'] = pat

def build(bld):
	# ".." includes the build directory (for config.h)
	bld(export_includes=".. ../public private", name="lm_inc")

	objs = []
	obj = lambda src: objs.append(src)

	#
	# platform
	#

	if bld.env.DEST_OS == "linux":
		if bld.env.LIB_UDEV:
			obj("platform/linux_libudev.c")
		else:
			obj("platform/linux_sysfs.c")

		obj("platform/linux.c")
		obj("platform/posix.c")

	elif bld.env.DEST_OS == "darwin":
		obj("platform/darwin.c")
		obj("platform/posix.c")

	elif bld.env.DEST_OS == "win32":
		obj("platform/windows.c")

	if bld.env.EMBED_PROTOS:
		obj("platform/embed.c")
	#
	# protocols
	#

	build_osc_proto = False
	for p in bld.env.PROTOCOLS:
		use = "lm_inc libmonome"
		if p == "osc":
			use = use + " LO"
			build_osc_proto = True
		source="proto/{0}.c".format(p)
		if bld.env.EMBED_PROTOS:
			obj(source)
		else:
			bld.shlib(
				source=source,
				features="proto_module",
				use=use,

				target="protocol_{0}".format(p),
				install_path="${LIBDIR}/monome")

	#
	# common
	#

	obj("rotation.c")
	obj("libmonome.c")

	if bld.env.DEST_OS == "win32":
		bld.shlib(
			source=objs,
			features="force_lib_prefix",
			use="lm_inc",

			name="libmonome",
			target="monome")
	else:
		# the UDEV use is ignored if it is not defined
		use = "lm_inc UDEV DL"
		if build_osc_proto and bld.env.EMBED_PROTOS:
			use += " LO"
		bld.shlib(
			source=objs,
			use=use,

			name="libmonome",
			target="monome",
			vnum=bld.env.VERSION)

	if bld.env.LIB_LO:
		bld.program(
			source="monomeserial.c",
			use="lm_inc libmonome LO",

			target="monomeserial")
